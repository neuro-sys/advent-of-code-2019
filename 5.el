(defconst op-add 1)
(defconst op-mul 2)
(defconst op-in 3)
(defconst op-out 4)
(defconst op-jump-if-true 5)
(defconst op-jump-if-false 6)
(defconst op-less-than 7)
(defconst op-equals 8)
(defconst op-end 99)

(defconst mode-position 0)
(defconst mode-immediate 1)

(defun load-program ()
  (with-temp-buffer
    (insert-file-contents "5.txt")
    (vconcat
     (mapcar 'string-to-number (split-string (buffer-string) "," t)))))

(defun decode-mode (op)
  (let ((a (% (floor (/ op 100)) 10))
        (b (% (floor (/ op 1000)) 10))
        (c (% (floor (/ op 10000)) 10)))
    (list a b c)))

(defun decode-inst (op)
  (% op 100))

;; Simplify decoder further

(defun decode-op-in-param (memory pc-sym)
  (let* ((pc-val (symbol-value pc-sym))
         (op (elt memory pc-val))
         (modes (decode-mode op))
         (a (elt memory (+ 1 pc-val))))
    (list a)))

(defun decode-op-1-param (memory pc-sym)
  (let* ((pc-val (symbol-value pc-sym))
         (op (elt memory pc-val))
         (modes (decode-mode op))
         (a (elt memory (+ 1 pc-val)))
         (a (if (= (nth 0 modes) mode-position) (elt memory a) a)))
    (list a)))

(defun decode-op-2-param (memory pc-sym)
  (let* ((pc-val (symbol-value pc-sym))
         (op (elt memory pc-val))
         (modes (decode-mode op))
         (a (elt memory (+ 1 pc-val)))
         (b (elt memory (+ 2 pc-val)))
         (a (if (= (nth 0 modes) mode-position) (elt memory a) a))
         (b (if (= (nth 1 modes) mode-position) (elt memory b) b)))
    (list a b)))

(defun decode-op-3-param (memory pc-sym)
  (let* ((pc-val (symbol-value pc-sym))
         (op (elt memory pc-val))
         (modes (decode-mode op))
         (a (elt memory (+ 1 pc-val)))
         (b (elt memory (+ 2 pc-val)))
         (c (elt memory (+ 3 pc-val)))
         (a (if (= (nth 0 modes) mode-position) (elt memory a) a))
         (b (if (= (nth 1 modes) mode-position) (elt memory b) b)))
    (list a b c)))

(defun do-op-add (memory pc-sym)
  (let ((operands (decode-op-3-param memory pc-sym)))
    (aset memory (nth 2 operands) (+ (nth 0 operands) (nth 1 operands)))
    (set pc-sym (+ 4 (symbol-value pc-sym)))))

(defun do-op-mul (memory pc-sym)
  (let ((operands (decode-op-3-param memory pc-sym)))
    (aset memory (nth 2 operands) (* (nth 0 operands) (nth 1 operands)))
    (set pc-sym (+ 4 (symbol-value pc-sym)))))

(defun do-op-in (memory pc-sym)
  (let ((operands (decode-op-in-param memory pc-sym))
        (b (read)))
    (aset memory (nth 0 operands) b))
  (set pc-sym (+ 2 (symbol-value pc-sym))))

(defun do-op-out (memory pc-sym)
  (let ((operands (decode-op-1-param memory pc-sym)))
    (insert (message "%d" (nth 0 operands))))
  (set pc-sym (+ 2 (symbol-value pc-sym))))

(defun do-op-jump-if-true (memory pc-sym)
  (let ((operands (decode-op-2-param memory pc-sym)))
    (if (not (zerop (nth 0 operands)))
        (set pc-sym (nth 1 operands))
      (set pc-sym (+ 3 (symbol-value pc-sym))))))

(defun do-op-jump-if-false (memory pc-sym)
  (let ((operands (decode-op-2-param memory pc-sym)))
    (if (zerop (nth 0 operands))
        (set pc-sym (nth 1 operands))
      (set pc-sym (+ 3 (symbol-value pc-sym))))))

(defun do-op-less-than (memory pc-sym)
  (let ((operands (decode-op-3-param memory pc-sym)))
    (if (< (nth 0 operands) (nth 1 operands))
        (aset memory (nth 2 operands) 1)
      (aset memory (nth 2 operands) 0)))
  (set pc-sym (+ 4 (symbol-value pc-sym))))

(defun do-op-equals (memory pc-sym)
  (let ((operands (decode-op-3-param memory pc-sym)))
    (if (= (nth 0 operands) (nth 1 operands))
        (aset memory (nth 2 operands) 1)
      (aset memory (nth 2 operands) 0)))
  (set pc-sym (+ 4 (symbol-value pc-sym))))

(defun run-int-code ()
  (let* ((memory (load-program))
         (memory-length (length memory))
         (pc 0)
         (cur-op (decode-inst (elt memory pc))))
    (while (/= cur-op op-end)
      (cond ((= cur-op op-add) (do-op-add memory 'pc))
            ((= cur-op op-mul) (do-op-mul memory 'pc))
            ((= cur-op op-in) (do-op-in memory 'pc))
            ((= cur-op op-out) (do-op-out memory 'pc))
            ((= cur-op op-jump-if-true) (do-op-jump-if-true memory 'pc))
            ((= cur-op op-jump-if-false) (do-op-jump-if-false memory 'pc))
            ((= cur-op op-less-than) (do-op-less-than memory 'pc))
            ((= cur-op op-equals) (do-op-equals memory 'pc))
            (t (throw 'invalid-op-code cur-op)))
      (setq cur-op (decode-inst (elt memory pc))))))

(run-int-code)
